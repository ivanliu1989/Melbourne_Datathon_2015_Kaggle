cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(pROC);require(data.table);library(r.vw)
# load('data/Ivan_Train_Test_Scale_Center_20151116.RData');ls()
load('data/Ivan_Train_Test_Scale_Center_20151121.RData');ls()
options(scipen=999);set.seed(19890624)
# Function used to select variables for each namespace
get_feature_type <- function(X, threshold = 50, verbose = FALSE) {
q_levels <- function (x)
{
if (data.table::is.data.table(x)) {
unlist(x[, lapply(.SD, function(x) length(unique(x)))])
}
else {
apply(x, 2, function(x) length(unique(x)))
}
}
lvs = q_levels(X)
fact_vars = names(lvs[lvs < threshold])
num_vars = names(lvs[lvs >= threshold])
if (verbose) {
print(data.frame(lvs))
}
list(fact_vars = fact_vars, num_vars = num_vars)
}
train$flag_class <- ifelse(train$flag_class == 'Y', 1, -1)
feat <- colnames(total)[c(3:46,48)]
feat
train_dt = data.table::setDT(train[,feat])
train_dt
target = 'flag_class'
data_types = get_feature_type(train_dt[, setdiff(names(train_dt), target), with=F], threshold = 50)
data_types
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
namespaces
head(train_dt$flag_class)
train_dt$flag_class = with(train_dt, ifelse(flag_class > 0, 1, -1))
head(train_dt$flag_class)
dt2vw(train_dt, 'train_dt.vw', namespaces, target=target, weight=NULL)
system('head -3 train_dt.vw')
list.files()
data("diamonds", package = "ggplot2")
dt = diamonds
dt
dt$y = with(dt, ifelse(y < 5.71, 1, -1))
ind_train = sample(1:nrow(dt), 40000)
dt_train = dt[ind_train,]
dt_val = dt[-ind_train,]
dt2vw(data = dt_train, fileName = "diamond_train.vw", target = "y")
dt2vw(data = dt_val, fileName = "diamond_val.vw", target = "y")
write.table(x = dt_val$y, file = "valid_labels.txt", row.names = F,
col.names = F)
auc1 = vw(training_data = "diamond_train.vw", validation_data = "diamond_val.vw",
validation_labels = "valid_labels.txt", use_perf = F)
list.files()
auc1 = vw(training_data = "diamond_train.vw", validation_data = "diamond_val.vw",
validation_labels = "valid_labels.txt", use_perf = F)
auc2 = vw(training_data = dt_train, validation_data = dt_val,
target = "y", use_perf = F)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
auc1 = vw(training_data = "diamond_train.vw", validation_data = "diamond_val.vw",
validation_labels = "valid_labels.txt", use_perf = F)
?vw
install.packages('perf')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
library(r.vw)
## data
data("diamonds", package = "ggplot2")
dt = diamonds
dt$y = with(dt, ifelse(y < 5.71, 1, -1))
## separate train and validation data
ind_train = sample(1:nrow(dt), 40000)
dt_train = dt[ind_train,]
dt_val = dt[-ind_train,]
dt2vw(data = dt_train, fileName = "diamond_train.vw", target = "y")
dt2vw(data = dt_val, fileName = "diamond_val.vw", target = "y")
write.table(x = dt_val$y, file = "valid_labels.txt", row.names = F,
col.names = F)
head(dt_train)
dt <- train
dt[,target]
feat <- names(train)
feat
feat <- names(train)[3:45,48]
target <- 'flag_class'
feat <- names(train)[c(3:45,48)]
target <- 'flag_class'
train_dt <- to_vw(train, feat, target)
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
rm(list=ls()); gc()
library(pROC);require(data.table);library(r.vw)
load('../data/Ivan_Train_Test_Scale_Center_20151121.RData');ls()
# Function used to select variables for each namespace
get_feature_type <- function(X, threshold = 50, verbose = FALSE) {
q_levels <- function (x)
{
if (data.table::is.data.table(x)) {
unlist(x[, lapply(.SD, function(x) length(unique(x)))])
}
else {
apply(x, 2, function(x) length(unique(x)))
}
}
lvs = q_levels(X)
fact_vars = names(lvs[lvs < threshold])
num_vars = names(lvs[lvs >= threshold])
if (verbose) {
print(data.frame(lvs))
}
list(fact_vars = fact_vars, num_vars = num_vars)
}
to_vw <- function(dt, feat, target){
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 50)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
return(dt)
}
feat <- names(train)[c(3:45,48)]; target <- 'flag_class'
train_dt <- to_vw(train, feat, target)
train_dt
dt2vw(train_dt, 'train_dt.vw', namespaces, target=target, weight=NULL); system('head -3 train_dt.vw')
namespaces
to_vw <- function(dt, feat, target, path){
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 50)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
return(dt)
}
train_dt <- to_vw(train, feat, target, 'train_dt.vw') # total
write.table(test_dt$flag_class, file='valid_labels.txt', row.names = F, col.names = F, quote = F)
test_dt <- to_vw(validation, feat, target, 'test_dt.vw') # test
write.table(test_dt$flag_class, file='valid_labels.txt', row.names = F, col.names = F, quote = F)
list.files()
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
library(r.vw)
## data
data("diamonds", package = "ggplot2")
dt = diamonds
dt$y = with(dt, ifelse(y < 5.71, 1, -1))
## separate train and validation data
ind_train = sample(1:nrow(dt), 40000)
dt_train = dt[ind_train,]
dt_val = dt[-ind_train,]
## first method: creating the vw data files before training
dt2vw(data = dt_train, fileName = "diamond_train.vw", target = "y")
dt2vw(data = dt_val, fileName = "diamond_val.vw", target = "y")
write.table(x = dt_val$y, file = "valid_labels.txt", row.names = F,
col.names = F)
auc1 = vw(training_data = "diamond_train.vw", validation_data = "diamond_val.vw",
validation_labels = "valid_labels.txt", use_perf = F)
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
rm(list=ls()); gc()
library(pROC);require(data.table);library(r.vw)
load('../data/Ivan_Train_Test_Scale_Center_20151121.RData');ls()
# Function used to select variables for each namespace
get_feature_type <- function(X, threshold = 50, verbose = FALSE) {
q_levels <- function (x)
{
if (data.table::is.data.table(x)) {
unlist(x[, lapply(.SD, function(x) length(unique(x)))])
}
else {
apply(x, 2, function(x) length(unique(x)))
}
}
lvs = q_levels(X)
fact_vars = names(lvs[lvs < threshold])
num_vars = names(lvs[lvs >= threshold])
if (verbose) {
print(data.frame(lvs))
}
list(fact_vars = fact_vars, num_vars = num_vars)
}
to_vw <- function(dt, feat, target, path){
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 50)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
return(dt)
}
# setwd where the data would be
feat <- names(train)[c(3:45,48)]; target <- 'flag_class'
train_dt <- to_vw(train, feat, target, 'train_dt.vw') # total
test_dt <- to_vw(validation, feat, target, 'test_dt.vw') # test
write.table(test_dt$flag_class, file='test_labels.txt', row.names = F, col.names = F, quote = F)
training_data='train_dt.vw'
test_data='test_dt.vw'
test_labels = "test_labels.txt"
out_probs = "out.txt"
model = "mdl.vw"
source('Rscripts/Ivan_vowpal_wabbit_func.R')
source('/Rscripts/Ivan_vowpal_wabbit_func.R')
source('../Rscripts/Ivan_vowpal_wabbit_func.R')
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
rm(list=ls()); gc()
library(pROC);require(data.table);library(r.vw)
load('../data/Ivan_Train_Test_Scale_Center_20151121.RData');ls()
source('../Rscripts/Ivan_vowpal_wabbit_func.R')
