return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server Native Client 10.0};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
rm(list=ls()); gc()
require(data.table);library(r.vw);library(ggplot2);library(pROC)
load('../data/9_train_validation_test_20151122.RData');ls()
source('../Rscripts/Ivan_vowpal_wabbit_func.R')
feat <- names(total_n)[c(3:(ncol(train)-1))]; target <- 'flag_class'
feat
feat <- names(total_n)[c(3:(ncol(total_n)-2), ncol(total_n))]; target <- 'flag_class'
feat
train_dt <- to_vw(total_n, feat, target, 'data/train_dt.vw') # total
test_dt <- to_vw(test_n, feat, target, 'data/test_dt.vw') # test
write.table(test_dt$flag_class, file='data/test_labels.txt', row.names = F, col.names = F, quote = F)
source('../Rscripts/Ivan_vowpal_wabbit_func.R')
train_dt <- to_vw(total_n, feat, target, 'data/train_dt.vw') # total
get_feature_type <- function(X, threshold = 50, verbose = FALSE) {
q_levels <- function (x)
{
if (data.table::is.data.table(x)) {
unlist(x[, lapply(.SD, function(x) length(unique(x)))])
}
else {
apply(x, 2, function(x) length(unique(x)))
}
}
lvs = q_levels(X)
fact_vars = names(lvs[lvs < threshold])
num_vars = names(lvs[lvs >= threshold])
if (verbose) {
print(data.frame(lvs))
}
list(fact_vars = fact_vars, num_vars = num_vars)
}
to_vw <- function(dt, feat, target, path){
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 10)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
return(dt)
}
dt <- total_n
head(dt)
dt <- total_n
# Function used to select variables for each namespace
get_feature_type <- function(X, threshold = 50, verbose = FALSE) {
q_levels <- function (x)
{
if (data.table::is.data.table(x)) {
unlist(x[, lapply(.SD, function(x) length(unique(x)))])
}
else {
apply(x, 2, function(x) length(unique(x)))
}
}
lvs = q_levels(X)
fact_vars = names(lvs[lvs < threshold])
num_vars = names(lvs[lvs >= threshold])
if (verbose) {
print(data.frame(lvs))
}
list(fact_vars = fact_vars, num_vars = num_vars)
}
to_vw <- function(dt, feat, target, path){
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 10)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
return(dt)
}
head(dt)
target
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
dt
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 10)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
namespaces
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
path
namespaces
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 20)
print(data_types)
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 30)
print(data_types)
dt <- total_n
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 30)
print(data_types)
dt[,target] = ifelse(dt[,target] == 'Y', 1, -1)
dt = data.table::setDT(dt[,feat])
data_types = get_feature_type(dt[, setdiff(names(dt), target), with=F], threshold = 50)
print(data_types)
namespaces = list(n = list(varName = data_types$num_vars, keepSpace=F),
c = list(varName = data_types$fact_vars, keepSpace=F))
dt2vw(dt, path, namespaces, target=target, weight=NULL); system(paste0('head -3 ', path))
# install.packages("devtools")
# devtools::install_github("JohnLangford/vowpal_wabbit", subdir = "R/r.vw")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle/vowpal_wabbit')
rm(list=ls()); gc()
require(data.table);library(r.vw);library(ggplot2);library(pROC)
load('../data/9_train_validation_test_20151122.RData');ls()
source('../Rscripts/Ivan_vowpal_wabbit_func.R')
feat <- names(total_n)[c(3:(ncol(total_n)-2), ncol(total_n))]; target <- 'flag_class'
train_dt <- to_vw(total_n, feat, target, 'data/train_dt.vw') # total
test_dt <- to_vw(test_n, feat, target, 'data/test_dt.vw') # test
write.table(test_dt$flag_class, file='data/test_labels.txt', row.names = F, col.names = F, quote = F)
training_data='data/train_dt.vw'
test_data='data/test_dt.vw'
test_labels = "data/test_labels.txt"
out_probs = "predictions/sub.txt"
model = "models/mdl.vw"
list.files('data/')
grid = expand.grid(eta=c(1),
extra=c('--holdout_period 10000 --normalized --adaptive --invariant',
'--nn 80 --holdout_period 10000 --normalized --adaptive --invariant',
'-q:: --holdout_period 10000 --normalized --adaptive --invariant'))
for(i in 1:nrow(grid)){
g = grid[i, ]
out_probs = paste0("predictions/submission_vw_20151126_NoReg_test_n_", g[['eta']], "_", i,".txt")
model = paste0("models/mdl",i,".vw")
# out_probs = paste0("predictions/submission_vw_20151126_0.25_1.txt")
auc = vw(training_data, test_data, loss = "logistic",
model, b = 30, learning_rate = g[['eta']],
passes = 10, l1=NULL, l2=NULL, early_terminate = 2,
link_function = "--link=logistic", extra = g[['extra']],
out_probs = out_probs, validation_labels = test_labels, verbose = TRUE,
do_evaluation = F, use_perf=FALSE, plot_roc=F)
#extra='--decay_learning_rate 0.9 --ksvm --kernel linear -q ::'
# print(auc)
# [1] 0.7404759
# 0.7749233 'nn 80'
}
list.files('data/')
grid = expand.grid(eta=c(0.5),
extra=c('--holdout_period 10000 --normalized --adaptive --invariant',
'--nn 30 --holdout_period 10000 --normalized --adaptive --invariant',
'-q:: --holdout_period 10000 --normalized --adaptive --invariant'))
for(i in 1:nrow(grid)){
g = grid[i, ]
out_probs = paste0("predictions/submission_vw_20151126_NoReg_test_n_", g[['eta']], "_", i,".txt")
model = paste0("models/mdl",i,".vw")
# out_probs = paste0("predictions/submission_vw_20151126_0.25_1.txt")
auc = vw(training_data, test_data, loss = "logistic",
model, b = 30, learning_rate = g[['eta']],
passes = 10, l1=NULL, l2=NULL, early_terminate = 2,
link_function = "--link=logistic", extra = g[['extra']],
out_probs = out_probs, validation_labels = test_labels, verbose = TRUE,
do_evaluation = F, use_perf=FALSE, plot_roc=F)
#extra='--decay_learning_rate 0.9 --ksvm --kernel linear -q ::'
# print(auc)
# [1] 0.7404759
# 0.7749233 'nn 80'
}
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(xgboost);library(pROC);require(randomForest);library(Rtsne);require(data.table);library(caret);library(RSofia);library(h2o)
# load('data/Ivan_Train_Test_Scale_Center_20151116.RData');ls()
load('data/9_train_validation_test_20151122.RData');ls()
options(scipen=999);set.seed(19890624)
write.csv(total_n, '../python_total_n_ffm_meta.csv', row.names = F)
write.csv(test_n, '../python_test_n_ffm_meta.csv', row.names = F)
