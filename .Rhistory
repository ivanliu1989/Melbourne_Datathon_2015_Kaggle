test$bl_diff_TRANSACTION_COUNT <- abs(test$TRANSACTION_COUNT - test$lag_TRANSACTION_COUNT)/(test$TRANSACTION_COUNT + test$lag_TRANSACTION_COUNT)
test$bl_diff_AVG_BET_SIZE<- abs(test$AVG_BET_SIZE - test$lag_AVG_BET_SIZE)/(test$AVG_BET_SIZE + test$lag_AVG_BET_SIZE)
test$bl_diff_MAX_BET_SIZE<- abs(test$MAX_BET_SIZE - test$lag_MAX_BET_SIZE)/(test$MAX_BET_SIZE + test$lag_MAX_BET_SIZE)
test$bl_diff_MIN_BET_SIZE<- abs(test$MIN_BET_SIZE - test$lag_MIN_BET_SIZE)/(test$MIN_BET_SIZE + test$lag_MIN_BET_SIZE)
test$bl_diff_STDEV_BET_SIZE<- abs(test$STDEV_BET_SIZE - test$lag_STDEV_BET_SIZE)/(test$STDEV_BET_SIZE + test$lag_STDEV_BET_SIZE)
test$row_num <- 1
test$identifier <- paste0(test$Account_ID, test$EVENT_ID, test$STATUS_ID, test$INPLAY_BET)
test[duplicated(test[,c(1,2,4,5)]), 'row_num'] <- 2
test_feat_bl <- test[test$row_num == 2, c(1,2,4,5, 15:19, 21)]
test_feat <- test[!test$identifier %in% test_feat_bl$identifier, c(1,2,4,5, 15:19, 21)]
test_feat_final <- rbind(test_feat_bl, test_feat)
### Output
dim(test_feat_final);length(unique(test_feat_final$identifier))
test_feat_final$identifier <- NULL
### test_feat merge
test_feat_inplay <- test_feat_final[test_feat_final$INPLAY_BET == 'Y',-c(3,4,10)];
names(test_feat_inplay) <- c('ACCOUNT_ID', 'EVENT_ID', 'BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN')
test_feat_outplay <- test_feat_final[!test_feat_final$INPLAY_BET == 'Y',-c(3,4,10)]
names(test_feat_outplay) <- c('ACCOUNT_ID', 'EVENT_ID', 'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')
test_dt <- merge(test_dt, test_feat_inplay, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID', 'EVENT_ID'))
test_dt <- merge(test_dt, test_feat_outplay, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID', 'EVENT_ID'))
test_dt[,c('BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN',
'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')][is.na(test_dt[,c('BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN',
'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')])] <- 0
test <- test_dt
apply(test,2, function(x) mean(is.na(x)))
apply(test,2, function(x) length(unique(x)))
save(test, file='data/S_complete_data_clean_up_test.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/S_complete_data_clean_up.RData');
load('data/S_complete_data_clean_up_test.RData');ls()
#################################
# 0. Test feature complete ######
#################################
test$flag_regr <- 0
test$flag_class <- 'M'
event_count <- aggregate(EVENT_ID ~ ACCOUNT_ID, data=total, length); names(event_count) <- c('ACCOUNT_ID', 'EVENT_COUNT')
total <- merge(total, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
test <- merge(test, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
all_n <- rbind(total, test[is.na(test$EVENT_COUNT),])
dim(all_n)
all <- rbind(total, test[!is.na(test$EVENT_COUNT),])
dim(all)
apply(all,2, function(x) mean(is.na(x)))
all$INVEST <- all$TRANSACTION_COUNT_INPLAY * all$AVG_BET_SIZE_INPLAY + all$TRANSACTION_COUNT_OUTPLAY * all$AVG_BET_SIZE_OUTPLAY
all_n$INVEST <- all_n$TRANSACTION_COUNT_INPLAY * all_n$AVG_BET_SIZE_INPLAY + all_n$TRANSACTION_COUNT_OUTPLAY * all_n$AVG_BET_SIZE_OUTPLAY
names(all_n)
colnames(all)
feat <- colnames(all)[c(3:58,61,62)]
dt <- all[,feat]
centroids <- classDist(dt, as.factor(all$flag_class))
distances <- predict(centroids, dt)
distances <- as.data.frame(distances)
head(distances)
str(dt)
feat <- colnames(all)[c(3:58)]
dt <- all[,feat]
centroids <- classDist(dt, as.factor(all$flag_class))
class(dt)
centroids <- classDist(as.matrix(dt), as.factor(all$flag_class))
head(as.matrix(dt))
dim(as.matrix(dt))
length(as.factor(all$flag_class))
library(caret)
feat <- colnames(all)[c(3:58)]
dt <- all[,feat]
centroids <- classDist(as.matrix(dt), as.factor(all$flag_class))
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/S_complete_data_clean_up.RData');
load('data/S_complete_data_clean_up_test.RData');ls()
#################################
# 0. Test feature complete ######
#################################
test$flag_regr <- 0
test$flag_class <- 'M'
##########################
# 1. New past hist #######
##########################
event_count <- aggregate(EVENT_ID ~ ACCOUNT_ID, data=total, length); names(event_count) <- c('ACCOUNT_ID', 'EVENT_COUNT')
total <- merge(total, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
test <- merge(test, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
head(total)
total$NET_PROFIT_IN_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_OUT_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_ALL_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
load('data/NEW_FEATURE.RData');ls()
total <- merge(total, NEW_FEATURE_train, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID','EVENT_ID'))
test <- merge(test, NEW_FEATURE_test[,-2], all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
head(total)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/S_complete_data_clean_up.RData');
load('data/S_complete_data_clean_up_test.RData');ls()
#################################
# 0. Test feature complete ######
#################################
test$flag_regr <- 0
test$flag_class <- 'M'
##########################
# 1. New past hist #######
##########################
event_count <- aggregate(EVENT_ID ~ ACCOUNT_ID, data=total, length); names(event_count) <- c('ACCOUNT_ID', 'EVENT_COUNT')
total <- merge(total, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
test <- merge(test, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
load('data/NEW_FEATURE.RData');ls()
total <- merge(total, NEW_FEATURE_train, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID','EVENT_ID'))
test <- merge(test, NEW_FEATURE_test[,-2], all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
total$NET_PROFIT_IN_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_OUT_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_ALL_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
test$NET_PROFIT_IN_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_OUT_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_ALL_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
all_n <- rbind(total, test[is.na(test$EVENT_COUNT),])
dim(all_n)
all <- rbind(total, test[!is.na(test$EVENT_COUNT),])
dim(all)
apply(all,2, function(x) mean(is.na(x)))
all$INVEST <- all$TRANSACTION_COUNT_INPLAY * all$AVG_BET_SIZE_INPLAY + all$TRANSACTION_COUNT_OUTPLAY * all$AVG_BET_SIZE_OUTPLAY
all_n$INVEST <- all_n$TRANSACTION_COUNT_INPLAY * all_n$AVG_BET_SIZE_INPLAY + all_n$TRANSACTION_COUNT_OUTPLAY * all_n$AVG_BET_SIZE_OUTPLAY
head(all)
apply(all_n,2, function(x) mean(is.na(x)))
names(all_n)
all_n <- all_n[,c(1:15,49:60)]
apply(all_n,2, function(x) mean(is.na(x)))
dim(all_n)
dim(all)
names(all)
all <- all[,c(1:58,61:72,59:60)]
test <- all[all$flag_class == 'M', ]
total <- all[all$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398),]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398),]
dim(train); dim(validation)
save(train, validation, total, test, file='data/S9_train_validation_test_20151110.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(xgboost);library(pROC);library(caret)
load('data/S9_train_validation_test_20151110.RData');ls()
# c(101183757,101183885,101184013) - last 3 event
# c(101150834,101153072,101149398) - validation
# c(101093076,101093194,101093312)
# c(101128387,101150348,101152275)
# c(101149870,101150716,101153308)
### Test
# train <- total
### Validation
training <- train[!train$EVENT_ID %in% c(101183757,101183885,101184013),]
testing <- train[train$EVENT_ID %in% c(101183757,101183885,101184013),]
dim(training); dim(testing)
training$flag_class <- ifelse(training$flag_class == 'Y', 1, 0)
colnames(training)
feat <- colnames(training)[c(3:70)]#c(3:72) #3:13,16,17,20,21,24,25,28,29,32,44:72
bst <-
xgboost(
data = as.matrix(training[,feat]), label = training$flag_class, max.depth = 6, eta = 0.15, nround = 500, maximize = F, #500,0.15
nthread = 4, objective = "binary:logistic", verbose = 1, early.stop.round = 10, print.every.n = 10, metrics = 'auc'
)
#     bst <-
#         xgboost(
#             data = as.matrix(training[,feat]), label = training$flag_class, max.depth = 9, num_parallel_tree = 150, subsample = 0.5, colsample_bytree =
#                 0.5, nround = 1, objective = "binary:logistic"
#         )
#--------------------basic prediction using xgboost--------------
# val <- validation
val <- testing
p <- predict(bst, as.matrix(val[,feat]))
# p <- predict(bst, as.matrix(train[,feat]))
val$Y <- p
tot_invest <- aggregate(INVEST ~ ACCOUNT_ID,data=val, sum, na.rm=T); names(tot_invest) <- c('ACCOUNT_ID', 'TOT_INVEST')
val <- merge(val, tot_invest, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
val$INVEST_PERCENT <- val$INVEST/val$TOT_INVEST * val$Y#(val$Y - 0.5) * 2
pred_fin <- aggregate(INVEST_PERCENT ~ ACCOUNT_ID, data=val, mean, na.rm=F)
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
### Validation
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, 0)
#########################
### Model Performance ###
#########################
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$INVEST_PERCENT);print(auc(rocobj)) # Invest * Possibility
print(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
print(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
prediction <- as.factor(ifelse(v$INVEST_PERCENT >=0.5, 1, 0))
confusionMatrix(as.factor(v$PRED_PROFIT_LOSS_3), prediction)
val <- validation
# val <- testing
p <- predict(bst, as.matrix(val[,feat]))
# p <- predict(bst, as.matrix(train[,feat]))
val$Y <- p
tot_invest <- aggregate(INVEST ~ ACCOUNT_ID,data=val, sum, na.rm=T); names(tot_invest) <- c('ACCOUNT_ID', 'TOT_INVEST')
val <- merge(val, tot_invest, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
val$INVEST_PERCENT <- val$INVEST/val$TOT_INVEST * val$Y#(val$Y - 0.5) * 2
pred_fin <- aggregate(INVEST_PERCENT ~ ACCOUNT_ID, data=val, mean, na.rm=F)
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
### Validation
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, 0)
#########################
### Model Performance ###
#########################
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$INVEST_PERCENT);print(auc(rocobj)) # Invest * Possibility
print(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
print(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
prediction <- as.factor(ifelse(v$INVEST_PERCENT >=0.5, 1, 0))
confusionMatrix(as.factor(v$PRED_PROFIT_LOSS_3), prediction)
names <- dimnames(as.matrix(train[,feat]))[[2]]
importance_matrix <- xgb.importance(names, model = bst)
xgb.plot.importance(importance_matrix)
WIN_HIST_LAG1 <- tbl_df(read.csv('New features/win_hist_lag_1.csv'))
WIN_HIST_LAG2 <- tbl_df(read.csv('New features/win_hist_lag_2.csv'))
WIN_HIST_LAG3 <- tbl_df(read.csv('New features/win_hist_lag_3.csv'))
library(dplyr); library(tidyr)
PREV_FREQ <- tbl_df(read.csv('New features/PREV_FREQ.csv'))
PREV_FREQ_SKEW <- tbl_df(read.csv('New features/PREV_FREQ_SKEW.csv'))
PREV_WIN <- tbl_df(read.csv('New features/PREV_WIN.csv'))
PREV_WIN_RATE <- tbl_df(read.csv('New features/PREV_WIN_RATE.csv'))
PREV_WIN_SKEW <- tbl_df(read.csv('New features/PREV_WIN_SKEW.csv'))
MARGIN_SKEW <- tbl_df(read.csv('New features/MARGIN_SKEW.csv'))
MARGIN_TOTAL <- tbl_df(read.csv('New features/TOTAL_MARGIN.csv'))
WIN_HIST_LAG1 <- tbl_df(read.csv('New features/win_hist_lag_1.csv'))
WIN_HIST_LAG2 <- tbl_df(read.csv('New features/win_hist_lag_2.csv'))
WIN_HIST_LAG3 <- tbl_df(read.csv('New features/win_hist_lag_3.csv'))
head(WIN_HIST_LAG2)
WIN_HIST_LAG1 <- gather(WIN_HIST_LAG1, Row.Labels); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG1')
head(WIN_HIST_LAG1)
head(MARGIN_TOTAL)
head(WIN_HIST_LAG1)
head(WIN_HIST_LAG2)
WIN_HIST_LAG1 <- tbl_df(read.csv('New features/win_hist_lag_1.csv'))
WIN_HIST_LAG1 <- gather(WIN_HIST_LAG1, ACCOUNT_ID); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG1')
head(WIN_HIST_LAG1)
PREV_FREQ <- tbl_df(read.csv('New features/PREV_FREQ.csv'))
PREV_FREQ_SKEW <- tbl_df(read.csv('New features/PREV_FREQ_SKEW.csv'))
PREV_WIN <- tbl_df(read.csv('New features/PREV_WIN.csv'))
PREV_WIN_RATE <- tbl_df(read.csv('New features/PREV_WIN_RATE.csv'))
PREV_WIN_SKEW <- tbl_df(read.csv('New features/PREV_WIN_SKEW.csv'))
MARGIN_SKEW <- tbl_df(read.csv('New features/MARGIN_SKEW.csv'))
MARGIN_TOTAL <- tbl_df(read.csv('New features/TOTAL_MARGIN.csv'))
WIN_HIST_LAG1 <- tbl_df(read.csv('New features/win_hist_lag_1.csv'))
WIN_HIST_LAG2 <- tbl_df(read.csv('New features/win_hist_lag_2.csv'))
WIN_HIST_LAG3 <- tbl_df(read.csv('New features/win_hist_lag_3.csv'))
PREV_FREQ <- gather(PREV_FREQ, ACCOUNT_ID); names(PREV_FREQ) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_FREQ')
PREV_FREQ_SKEW <- gather(PREV_FREQ_SKEW, ACCOUNT_ID); names(PREV_FREQ_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_FREQ_SKEW')
PREV_WIN <- gather(PREV_WIN, ACCOUNT_ID); names(PREV_WIN) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN')
PREV_WIN_RATE <- gather(PREV_WIN_RATE, ACCOUNT_ID); names(PREV_WIN_RATE) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN_RATE')
PREV_WIN_SKEW <- gather(PREV_WIN_SKEW, ACCOUNT_ID); names(PREV_WIN_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN_SKEW')
MARGIN_SKEW <- gather(MARGIN_SKEW, Row.Labels); names(MARGIN_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'MARGIN_SKEW')
MARGIN_TOTAL <- gather(MARGIN_TOTAL, Row.Labels); names(MARGIN_TOTAL) <- c('ACCOUNT_ID', 'EVENT_ID', 'MARGIN_TOTAL')
WIN_HIST_LAG1 <- gather(WIN_HIST_LAG1, ACCOUNT_ID); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG1')
WIN_HIST_LAG2 <- gather(WIN_HIST_LAG2, ACCOUNT_ID); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG2')
WIN_HIST_LAG3 <- gather(WIN_HIST_LAG3, ACCOUNT_ID); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG3')
dim(PREV_WIN_SKEW); dim(PREV_WIN_RATE); dim(PREV_WIN); dim(PREV_FREQ_SKEW); dim(PREV_FREQ); dim(MARGIN_SKEW); dim(MARGIN_TOTAL)
NEW_FEATURE <- merge(PREV_FREQ, PREV_FREQ_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN_RATE, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, MARGIN_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, MARGIN_TOTAL, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG1, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG2, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG3, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
dim(NEW_FEATURE); head(NEW_FEATURE)
NEW_FEATURE$EVENT_ID <- gsub('X', '',NEW_FEATURE$EVENT_ID)
NEW_FEATURE_train <- NEW_FEATURE[NEW_FEATURE$EVENT_ID != 'test',]
NEW_FEATURE_test <- NEW_FEATURE[NEW_FEATURE$EVENT_ID == 'test',]
table(NEW_FEATURE_train$EVENT_ID)
save(NEW_FEATURE_train, NEW_FEATURE_test, file='data/NEW_FEATURE.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/S_complete_data_clean_up.RData');
load('data/S_complete_data_clean_up_test.RData');ls()
#################################
# 0. Test feature complete ######
#################################
test$flag_regr <- 0
test$flag_class <- 'M'
##########################
# 1. New past hist #######
##########################
event_count <- aggregate(EVENT_ID ~ ACCOUNT_ID, data=total, length); names(event_count) <- c('ACCOUNT_ID', 'EVENT_COUNT')
total <- merge(total, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
test <- merge(test, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
load('data/NEW_FEATURE.RData');ls()
total <- merge(total, NEW_FEATURE_train, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID','EVENT_ID'))
test <- merge(test, NEW_FEATURE_test[,-2], all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
total$NET_PROFIT_IN_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_OUT_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_ALL_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
test$NET_PROFIT_IN_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_OUT_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_ALL_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
#################################
# 1.5 Combine Total & Test ######
#################################
all_n <- rbind(total, test[is.na(test$EVENT_COUNT),])
dim(all_n)
all <- rbind(total, test[!is.na(test$EVENT_COUNT),])
dim(all)
apply(all,2, function(x) mean(is.na(x)))
##########################
# 3. Invest feature ######
##########################
all$INVEST <- all$TRANSACTION_COUNT_INPLAY * all$AVG_BET_SIZE_INPLAY + all$TRANSACTION_COUNT_OUTPLAY * all$AVG_BET_SIZE_OUTPLAY
all_n$INVEST <- all_n$TRANSACTION_COUNT_INPLAY * all_n$AVG_BET_SIZE_INPLAY + all_n$TRANSACTION_COUNT_OUTPLAY * all_n$AVG_BET_SIZE_OUTPLAY
names(all)
head(all)
head(NEW_FEATURE)
head(NEW_FEATURE_train)
library(dplyr); library(tidyr)
PREV_FREQ <- tbl_df(read.csv('New features/PREV_FREQ.csv'))
PREV_FREQ_SKEW <- tbl_df(read.csv('New features/PREV_FREQ_SKEW.csv'))
PREV_WIN <- tbl_df(read.csv('New features/PREV_WIN.csv'))
PREV_WIN_RATE <- tbl_df(read.csv('New features/PREV_WIN_RATE.csv'))
PREV_WIN_SKEW <- tbl_df(read.csv('New features/PREV_WIN_SKEW.csv'))
MARGIN_SKEW <- tbl_df(read.csv('New features/MARGIN_SKEW.csv'))
MARGIN_TOTAL <- tbl_df(read.csv('New features/TOTAL_MARGIN.csv'))
WIN_HIST_LAG1 <- tbl_df(read.csv('New features/win_hist_lag_1.csv'))
WIN_HIST_LAG2 <- tbl_df(read.csv('New features/win_hist_lag_2.csv'))
WIN_HIST_LAG3 <- tbl_df(read.csv('New features/win_hist_lag_3.csv'))
PREV_FREQ <- gather(PREV_FREQ, ACCOUNT_ID); names(PREV_FREQ) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_FREQ')
PREV_FREQ_SKEW <- gather(PREV_FREQ_SKEW, ACCOUNT_ID); names(PREV_FREQ_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_FREQ_SKEW')
PREV_WIN <- gather(PREV_WIN, ACCOUNT_ID); names(PREV_WIN) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN')
PREV_WIN_RATE <- gather(PREV_WIN_RATE, ACCOUNT_ID); names(PREV_WIN_RATE) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN_RATE')
PREV_WIN_SKEW <- gather(PREV_WIN_SKEW, ACCOUNT_ID); names(PREV_WIN_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'PREV_WIN_SKEW')
MARGIN_SKEW <- gather(MARGIN_SKEW, Row.Labels); names(MARGIN_SKEW) <- c('ACCOUNT_ID', 'EVENT_ID', 'MARGIN_SKEW')
MARGIN_TOTAL <- gather(MARGIN_TOTAL, Row.Labels); names(MARGIN_TOTAL) <- c('ACCOUNT_ID', 'EVENT_ID', 'MARGIN_TOTAL')
WIN_HIST_LAG1 <- gather(WIN_HIST_LAG1, ACCOUNT_ID); names(WIN_HIST_LAG1) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG1')
WIN_HIST_LAG2 <- gather(WIN_HIST_LAG2, ACCOUNT_ID); names(WIN_HIST_LAG2) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG2')
WIN_HIST_LAG3 <- gather(WIN_HIST_LAG3, ACCOUNT_ID); names(WIN_HIST_LAG3) <- c('ACCOUNT_ID', 'EVENT_ID', 'WIN_HIST_LAG3')
dim(PREV_WIN_SKEW); dim(PREV_WIN_RATE); dim(PREV_WIN); dim(PREV_FREQ_SKEW); dim(PREV_FREQ); dim(MARGIN_SKEW); dim(MARGIN_TOTAL)
NEW_FEATURE <- merge(PREV_FREQ, PREV_FREQ_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN_RATE, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, PREV_WIN_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, MARGIN_SKEW, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, MARGIN_TOTAL, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG1, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG2, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
NEW_FEATURE <- merge(NEW_FEATURE, WIN_HIST_LAG3, all.x = TRUE, all.y = T, by = c('ACCOUNT_ID', 'EVENT_ID'))
dim(NEW_FEATURE); head(NEW_FEATURE)
NEW_FEATURE$EVENT_ID <- gsub('X', '',NEW_FEATURE$EVENT_ID)
NEW_FEATURE_train <- NEW_FEATURE[NEW_FEATURE$EVENT_ID != 'test',]
NEW_FEATURE_test <- NEW_FEATURE[NEW_FEATURE$EVENT_ID == 'test',]
table(NEW_FEATURE_train$EVENT_ID)
save(NEW_FEATURE_train, NEW_FEATURE_test, file='data/NEW_FEATURE.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/S_complete_data_clean_up.RData');
load('data/S_complete_data_clean_up_test.RData');ls()
#################################
# 0. Test feature complete ######
#################################
test$flag_regr <- 0
test$flag_class <- 'M'
##########################
# 1. New past hist #######
##########################
event_count <- aggregate(EVENT_ID ~ ACCOUNT_ID, data=total, length); names(event_count) <- c('ACCOUNT_ID', 'EVENT_COUNT')
total <- merge(total, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
test <- merge(test, event_count, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
load('data/NEW_FEATURE.RData');ls()
total <- merge(total, NEW_FEATURE_train, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID','EVENT_ID'))
test <- merge(test, NEW_FEATURE_test[,-2], all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
total$NET_PROFIT_IN_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_OUT_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
total$NET_PROFIT_ALL_PER_EVENT <- total$NET_PROFIT_INPLAY / total$EVENT_COUNT
test$NET_PROFIT_IN_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_OUT_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
test$NET_PROFIT_ALL_PER_EVENT <- test$NET_PROFIT_INPLAY / test$EVENT_COUNT
#################################
# 1.5 Combine Total & Test ######
#################################
all_n <- rbind(total, test[is.na(test$EVENT_COUNT),])
dim(all_n)
all <- rbind(total, test[!is.na(test$EVENT_COUNT),])
dim(all)
apply(all,2, function(x) mean(is.na(x)))
##########################
# 3. Invest feature ######
##########################
all$INVEST <- all$TRANSACTION_COUNT_INPLAY * all$AVG_BET_SIZE_INPLAY + all$TRANSACTION_COUNT_OUTPLAY * all$AVG_BET_SIZE_OUTPLAY
all_n$INVEST <- all_n$TRANSACTION_COUNT_INPLAY * all_n$AVG_BET_SIZE_INPLAY + all_n$TRANSACTION_COUNT_OUTPLAY * all_n$AVG_BET_SIZE_OUTPLAY
names(all)
all_n <- all_n[,c(1:15,49:60)]
apply(all_n,2, function(x) mean(is.na(x)))
names(all)
feat <- c(3:58,61:75)
library(readr); library(Rtsne); library(ggplot2)
tsne <- Rtsne(as.matrix(all[,feat]), check_duplicates = FALSE, pca = TRUE,
perplexity=30, theta=0.5, dims=2)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(sub("Class_", "", all[,58])) # 36, 58
p <- ggplot(embedding, aes(x=V1, y=V2, color=Class)) +
geom_point(size=1.25) +
guides(colour = guide_legend(override.aes = list(size=6))) +
xlab("") + ylab("") +
ggtitle("t-SNE 2D Embedding of Betting Data") +
theme_light(base_size=20) +
theme(strip.background = element_blank(),
strip.text.x     = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank(),
axis.ticks       = element_blank(),
axis.line        = element_blank(),
panel.border     = element_blank())
p
names(all)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(sub("Class_", "", all[,60])) # 36, 58
p <- ggplot(embedding, aes(x=V1, y=V2, color=Class)) +
geom_point(size=1.25) +
guides(colour = guide_legend(override.aes = list(size=6))) +
xlab("") + ylab("") +
ggtitle("t-SNE 2D Embedding of Betting Data") +
theme_light(base_size=20) +
theme(strip.background = element_blank(),
strip.text.x     = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank(),
axis.ticks       = element_blank(),
axis.line        = element_blank(),
panel.border     = element_blank())
p
library(readr); library(Rtsne); library(ggplot2)
tsne <- Rtsne(as.matrix(all[,feat]), check_duplicates = FALSE, pca = TRUE,
perplexity=30, theta=0.5, dims=3)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(sub("Class_", "", all[,60])) # 36, 58
tsne_3d_new <- embedding[,1:3]; names(tsne_3d_new) <- c('tsne_3d_new_1', 'tsne_3d_new_2', 'tsne_3d_new_3')
head(tsne_3d_new)
tsne_3d <- embedding[,1:3]; names(tsne_3d) <- c('tsne_3d_1', 'tsne_3d_2', 'tsne_3d_3')
head(tsne_3d)
all <- cbind(all, tsne_3d)
names(all)
all <- all[,c(1:58,61:78,59:60)]
names(all)
test <- all[all$flag_class == 'M', ]
total <- all[all$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398),]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398),]
dim(train); dim(validation)
save(train, validation, total, test, file='data/S9_train_validation_test_20151110.RData')
names(all_c)
names(all_n)
feat_n <- c(3:25)
tsne <- Rtsne(as.matrix(all_n[,feat_n]), check_duplicates = FALSE, pca = TRUE,
perplexity=30, theta=0.5, dims=2)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(sub("Class_", "", all[,60])) # 36, 58
p <- ggplot(embedding, aes(x=V1, y=V2, color=Class)) +
geom_point(size=1.25) +
guides(colour = guide_legend(override.aes = list(size=6))) +
xlab("") + ylab("") +
ggtitle("t-SNE 2D Embedding of Betting Data") +
theme_light(base_size=20) +
theme(strip.background = element_blank(),
strip.text.x     = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank(),
axis.ticks       = element_blank(),
axis.line        = element_blank(),
panel.border     = element_blank())
p
names(all_n)
embedding$Class <- as.factor(sub("Class_", "", all_n[,27])) # 27, 60
p <- ggplot(embedding, aes(x=V1, y=V2, color=Class)) +
geom_point(size=1.25) +
guides(colour = guide_legend(override.aes = list(size=6))) +
xlab("") + ylab("") +
ggtitle("t-SNE 2D Embedding of Betting Data") +
theme_light(base_size=20) +
theme(strip.background = element_blank(),
strip.text.x     = element_blank(),
axis.text.x      = element_blank(),
axis.text.y      = element_blank(),
axis.ticks       = element_blank(),
axis.line        = element_blank(),
panel.border     = element_blank())
p
tsne <- Rtsne(as.matrix(all_n[,feat_n]), check_duplicates = FALSE, pca = TRUE,
perplexity=30, theta=0.5, dims=3)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(sub("Class_", "", all_n[,27])) # 27, 60
head(embedding)
tsne_3d <- embedding[,1:3]; names(tsne_3d) <- c('tsne_3d_1', 'tsne_3d_2', 'tsne_3d_3')
tsne_3d_test <- embedding[,1:3]; names(tsne_3d_test) <- c('tsne_3d_1', 'tsne_3d_2', 'tsne_3d_3')
all_c <- cbind(all_c, tsne_3d_test)
all_n <- cbind(all_n, tsne_3d_test)
head(all_n)
names(all_n)
all_n <- all_n[,c(1:25, 28:30, 26,27)]
test <- all_n[all_n$flag_class == 'M', ]
total <- all_n[all_n$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398),]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398),]
dim(train); dim(validation)
save(train, validation, total, test, file='data/S9_train_validation_test_20151110_test.RData')
