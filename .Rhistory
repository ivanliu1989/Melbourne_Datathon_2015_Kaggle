odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(xgboost);library(pROC);library(caret)
load('../S9_train_validation_test_20151110.RData');ls()
head(total)
?shift
?cumsum
cumprod(1:10)
cumsum(1:10)
install.packages('binhf')
?shift
require(binhf)
?shift
v<-runif(10)
v
shift(v,4,dir="right")
shift(v, fill = 0, type='lag')
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(NA,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(NA,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
v<-runif(10)
v
shift(v,4)
shift(v,4)
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-0
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(NA,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(NA,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
shift(v,4)
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(0,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(0,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
shift(v,4)
shift<-function(x,fill,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(fill,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(fill,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
shift<-function(x,fill,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(fill,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(fill,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
v<-runif(10)
v
shift(v,-2)
shift(v,0,-2)
shift(v,0,-1)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
# setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(MASS);library(e1071)
### Read Data
load('../Datathon_Full_Dataset/cleaned_raw_data.RData')
ls()
#trim the white space
d$STATUS_ID <- trimws(d$STATUS_ID)
d$BID_TYP <- trimws(d$BID_TYP)
#the columns of interest
requiredColumns <- c('ACCOUNT_ID','EVENT_ID','BID_TYP','STATUS_ID','PLACED_DATE','TAKEN_DATE','BET_PRICE','OFF_DT',
'PRICE_TAKEN','INPLAY_BET','BET_SIZE','PROFIT_LOSS','IS_COUNTRY', 'BET_COUNTRY', 'BET_OP_COUNTRY', 'BET_COUNTRY_ONE', 'BET_COUNTRY_TWO')
#rows of interest - just the settled bets
requiredRows <- which(d$STATUS_ID == 'S')
requiredRows2 <- which(d$STATUS_ID == 'L')
requiredRows3 <- which(d$STATUS_ID == 'C')
#filter
test <- d[requiredRows, c('ACCOUNT_ID','EVENT_ID','BID_TYP', 'INPLAY_BET','BET_SIZE')]
dl <- d[requiredRows2,requiredColumns]
dc <- d[requiredRows3,requiredColumns]
d <- d[requiredRows,requiredColumns]
#correct the profit_loss calculation
d$PROFIT_LOSS1 <- 0.0
r1 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'B'
r2 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'L'
r3 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'L'
r4 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'B'
d$PROFIT_LOSS1[r1] <- (d$PRICE_TAKEN[r1] - 1.0)  * d$BET_SIZE[r1]
d$PROFIT_LOSS1[r2] <- d$BET_SIZE[r2]
d$PROFIT_LOSS1[r3] <- (d$PRICE_TAKEN[r3] - 1.0)  * -1.0 * d$BET_SIZE[r3]
d$PROFIT_LOSS1[r4] <- -1.0 * d$BET_SIZE[r4]
d$PROFIT_LOSS <- d$PROFIT_LOSS1
d$PROFIT_LOSS1 <- NULL
#date format
d$PLACED_DATE <- strptime(d$PLACED_DATE, "%d/%m/%Y %I:%M:%S %p")
d$TAKEN_DATE <- strptime(d$TAKEN_DATE, "%d/%m/%Y %I:%M:%S %p")
d$OFF_DT <- strptime(d$OFF_DT, "%d/%m/%Y %I:%M:%S %p")
d$PLACED_TAKEN_TIME <- as.numeric(d$TAKEN_DATE - d$PLACED_DATE)
#diff bet and taken
d$diff_bt <- (d$PRICE_TAKEN - d$BET_PRICE)/(d$BET_PRICE)
d$diff_bt #bet country
d$BET_COUNTRY_SIZE <- ifelse(d$BET_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_OP_COUNTRY_SIZE <- ifelse(d$BET_OP_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_ONE_SIZE <- ifelse(d$BET_COUNTRY_ONE == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_TWO_SIZE <- ifelse(d$BET_COUNTRY_TWO == 1, d$BET_SIZE, 0)
d <- dt
#trim the white space
d$STATUS_ID <- trimws(d$STATUS_ID)
d$BID_TYP <- trimws(d$BID_TYP)
#the columns of interest
requiredColumns <- c('ACCOUNT_ID','EVENT_ID','BID_TYP','STATUS_ID','PLACED_DATE','TAKEN_DATE','BET_PRICE','OFF_DT',
'PRICE_TAKEN','INPLAY_BET','BET_SIZE','PROFIT_LOSS','IS_COUNTRY', 'BET_COUNTRY', 'BET_OP_COUNTRY', 'BET_COUNTRY_ONE', 'BET_COUNTRY_TWO')
#rows of interest - just the settled bets
requiredRows <- which(d$STATUS_ID == 'S')
requiredRows2 <- which(d$STATUS_ID == 'L')
requiredRows3 <- which(d$STATUS_ID == 'C')
#filter
test <- d[requiredRows, c('ACCOUNT_ID','EVENT_ID','BID_TYP', 'INPLAY_BET','BET_SIZE')]
dl <- d[requiredRows2,requiredColumns]
dc <- d[requiredRows3,requiredColumns]
d <- d[requiredRows,requiredColumns]
#correct the profit_loss calculation
d$PROFIT_LOSS1 <- 0.0
r1 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'B'
r2 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'L'
r3 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'L'
r4 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'B'
d$PROFIT_LOSS1[r1] <- (d$PRICE_TAKEN[r1] - 1.0)  * d$BET_SIZE[r1]
d$PROFIT_LOSS1[r2] <- d$BET_SIZE[r2]
d$PROFIT_LOSS1[r3] <- (d$PRICE_TAKEN[r3] - 1.0)  * -1.0 * d$BET_SIZE[r3]
d$PROFIT_LOSS1[r4] <- -1.0 * d$BET_SIZE[r4]
d$PROFIT_LOSS <- d$PROFIT_LOSS1
d$PROFIT_LOSS1 <- NULL
#date format
d$PLACED_DATE <- strptime(d$PLACED_DATE, "%d/%m/%Y %I:%M:%S %p")
d$TAKEN_DATE <- strptime(d$TAKEN_DATE, "%d/%m/%Y %I:%M:%S %p")
d$OFF_DT <- strptime(d$OFF_DT, "%d/%m/%Y %I:%M:%S %p")
d$PLACED_TAKEN_TIME <- as.numeric(d$TAKEN_DATE - d$PLACED_DATE)
#diff bet and taken
d$diff_bt <- (d$PRICE_TAKEN - d$BET_PRICE)/(d$BET_PRICE)
d$diff_bt #bet country
d$BET_COUNTRY_SIZE <- ifelse(d$BET_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_OP_COUNTRY_SIZE <- ifelse(d$BET_OP_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_ONE_SIZE <- ifelse(d$BET_COUNTRY_ONE == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_TWO_SIZE <- ifelse(d$BET_COUNTRY_TWO == 1, d$BET_SIZE, 0)
head(d)
as.numeric(d$PLACED_DATE)
head(d)
head(as.numeric(d$PLACED_DATE))
range(as.numeric(d$PLACED_DATE))
shift<-function(x,fill,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(fill,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(fill,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
range(as.numeric(d$PLACED_DATE), na.rm = )
range(as.numeric(d$PLACED_DATE), na.rm = T)
range(as.numeric(d$PLACED_DATE)-1400000000, na.rm = T)
d <- dt
#trim the white space
d$STATUS_ID <- trimws(d$STATUS_ID)
d$BID_TYP <- trimws(d$BID_TYP)
#the columns of interest
requiredColumns <- c('ACCOUNT_ID','EVENT_ID','BID_TYP','STATUS_ID','PLACED_DATE','TAKEN_DATE','BET_PRICE','OFF_DT',
'PRICE_TAKEN','INPLAY_BET','BET_SIZE','PROFIT_LOSS','IS_COUNTRY', 'BET_COUNTRY', 'BET_OP_COUNTRY', 'BET_COUNTRY_ONE', 'BET_COUNTRY_TWO')
#rows of interest - just the settled bets
requiredRows <- which(d$STATUS_ID == 'S')
requiredRows2 <- which(d$STATUS_ID == 'L')
requiredRows3 <- which(d$STATUS_ID == 'C')
#filter
test <- d[requiredRows, c('ACCOUNT_ID','EVENT_ID','BID_TYP', 'INPLAY_BET','BET_SIZE')]
dl <- d[requiredRows2,requiredColumns]
dc <- d[requiredRows3,requiredColumns]
d <- d[requiredRows,requiredColumns]
#correct the profit_loss calculation
d$PROFIT_LOSS1 <- 0.0
r1 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'B'
r2 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'L'
r3 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'L'
r4 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'B'
d$PROFIT_LOSS1[r1] <- (d$PRICE_TAKEN[r1] - 1.0)  * d$BET_SIZE[r1]
d$PROFIT_LOSS1[r2] <- d$BET_SIZE[r2]
d$PROFIT_LOSS1[r3] <- (d$PRICE_TAKEN[r3] - 1.0)  * -1.0 * d$BET_SIZE[r3]
d$PROFIT_LOSS1[r4] <- -1.0 * d$BET_SIZE[r4]
d$PROFIT_LOSS <- d$PROFIT_LOSS1
d$PROFIT_LOSS1 <- NULL
#date format
d$PLACED_DATE <- as.numeric(strptime(d$PLACED_DATE, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$TAKEN_DATE <- as.numeric(strptime(d$TAKEN_DATE, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$OFF_DT <- as.numeric(strptime(d$OFF_DT, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$PLACED_TAKEN_TIME <- as.numeric(d$TAKEN_DATE - d$PLACED_DATE)
#diff bet and taken
d$diff_bt <- (d$PRICE_TAKEN - d$BET_PRICE)/(d$BET_PRICE)
d$diff_bt #bet country
d$BET_COUNTRY_SIZE <- ifelse(d$BET_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_OP_COUNTRY_SIZE <- ifelse(d$BET_OP_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_ONE_SIZE <- ifelse(d$BET_COUNTRY_ONE == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_TWO_SIZE <- ifelse(d$BET_COUNTRY_TWO == 1, d$BET_SIZE, 0)
head(d)
library(data.table)
d <- data.table(d)
d
d2 <- data.table(d)
d2[,TRANSACTION_COUNT := length(ACCOUNT_ID), by = c(ACCOUNT_ID, EVENT_ID, BID_TYP, STATUS_ID)]
D2
d2
d2[, TRANSACTION_COUNT := nrow, by = c(ACCOUNT_ID, EVENT_ID, BID_TYP, STATUS_ID)]
d2[, TRANSACTION_COUNT := length(ACCOUNT_ID), by = ACCOUNT_ID, EVENT_ID, BID_TYP, STATUS_ID]
d2[, TRANSACTION_COUNT := length(ACCOUNT_ID), by = c('ACCOUNT_ID', 'EVENT_ID', 'BID_TYP', 'STATUS_ID')]
d2
d2[, TRANSACTION_COUNT := sum(PROFIT_LOSS), by = c('ACCOUNT_ID', 'EVENT_ID', 'BID_TYP', 'STATUS_ID')]
d2[, PROFIT_LOSS_ALL := sum(PROFIT_LOSS), by = c('ACCOUNT_ID', 'EVENT_ID', 'BID_TYP', 'STATUS_ID')]
D2
d2
d <- dt
#trim the white space
d$STATUS_ID <- trimws(d$STATUS_ID)
d$BID_TYP <- trimws(d$BID_TYP)
#the columns of interest
requiredColumns <- c('ACCOUNT_ID','EVENT_ID','BID_TYP','STATUS_ID','PLACED_DATE','TAKEN_DATE','BET_PRICE','OFF_DT',
'PRICE_TAKEN','INPLAY_BET','BET_SIZE','PROFIT_LOSS','IS_COUNTRY', 'BET_COUNTRY', 'BET_OP_COUNTRY', 'BET_COUNTRY_ONE', 'BET_COUNTRY_TWO')
#rows of interest - just the settled bets
requiredRows <- which(d$STATUS_ID == 'S')
requiredRows2 <- which(d$STATUS_ID == 'L')
requiredRows3 <- which(d$STATUS_ID == 'C')
#filter
test <- d[requiredRows, c('ACCOUNT_ID','EVENT_ID','BID_TYP', 'INPLAY_BET','BET_SIZE')]
dl <- d[requiredRows2,requiredColumns]
dc <- d[requiredRows3,requiredColumns]
d <- d[requiredRows,requiredColumns]
#correct the profit_loss calculation
d$PROFIT_LOSS1 <- 0.0
r1 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'B'
r2 <- d$PROFIT_LOSS > 0 & d$BID_TYP == 'L'
r3 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'L'
r4 <- d$PROFIT_LOSS < 0 & d$BID_TYP == 'B'
d$PROFIT_LOSS1[r1] <- (d$PRICE_TAKEN[r1] - 1.0)  * d$BET_SIZE[r1]
d$PROFIT_LOSS1[r2] <- d$BET_SIZE[r2]
d$PROFIT_LOSS1[r3] <- (d$PRICE_TAKEN[r3] - 1.0)  * -1.0 * d$BET_SIZE[r3]
d$PROFIT_LOSS1[r4] <- -1.0 * d$BET_SIZE[r4]
d$PROFIT_LOSS <- d$PROFIT_LOSS1
d$PROFIT_LOSS1 <- NULL
#date format
d$PLACED_DATE <- as.numeric(strptime(d$PLACED_DATE, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$TAKEN_DATE <- as.numeric(strptime(d$TAKEN_DATE, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$OFF_DT <- as.numeric(strptime(d$OFF_DT, "%d/%m/%Y %I:%M:%S %p"))-1400000000
d$PLACED_TAKEN_TIME <- as.numeric(d$TAKEN_DATE - d$PLACED_DATE)
#diff bet and taken
d$diff_bt <- (d$PRICE_TAKEN - d$BET_PRICE)/(d$BET_PRICE)
d$diff_bt #bet country
d$BET_COUNTRY_SIZE <- ifelse(d$BET_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_OP_COUNTRY_SIZE <- ifelse(d$BET_OP_COUNTRY == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_ONE_SIZE <- ifelse(d$BET_COUNTRY_ONE == 1, d$BET_SIZE, 0)
d$BET_COUNTRY_TWO_SIZE <- ifelse(d$BET_COUNTRY_TWO == 1, d$BET_SIZE, 0)
d2 <- d[sort(d$OFF_DT, d$TAKEN_DATE, d$PLACED_DATE),]
?sort
d2 <- d[sort(c(d$OFF_DT, d$TAKEN_DATE, d$PLACED_DATE)),]
d2 <- data.table(d2)
d2
head(sort(c(d$OFF_DT, d$TAKEN_DATE, d$PLACED_DATE)))
head(sort(d$OFF_DT))
head(order(d$OFF_DT))
d2 <- d[order(c(d$OFF_DT, d$TAKEN_DATE, d$PLACED_DATE)),]
d2 <- data.table(d2)
d2
?order
d2 <- data.table(d)
setorder(d2, OFF_DT, PLACED_DATE)
d2
