test_dt[, c('TRANSACTION_COUNT_INPLAY','TRANSACTION_COUNT_OUTPLAY','TRANSACTION_COUNT_OUTPLAY_L','TRANSACTION_COUNT_OUTPLAY_C',
'AVG_BET_SIZE_INPLAY','AVG_BET_SIZE_OUTPLAY','AVG_BET_SIZE_OUTPLAY_L','AVG_BET_SIZE_OUTPLAY_C',
'MAX_BET_SIZE_INPLAY','MAX_BET_SIZE_OUTPLAY','MAX_BET_SIZE_OUTPLAY_L','MAX_BET_SIZE_OUTPLAY_C',
'MIN_BET_SIZE_INPLAY','MIN_BET_SIZE_OUTPLAY','MIN_BET_SIZE_OUTPLAY_L','MIN_BET_SIZE_OUTPLAY_C',
'STDEV_BET_SIZE_INPLAY','STDEV_BET_SIZE_OUTPLAY','STDEV_BET_SIZE_OUTPLAY_L','STDEV_BET_SIZE_OUTPLAY_C'
#               ,'AVG_PLACED_TAKEN_TIME_INPLAY','AVG_PLACED_TAKEN_TIME_OUTPLAY',
#               'STDEV_PLACED_TAKEN_TIME_INPLAY','STDEV_PLACED_TAKEN_TIME_OUTPLAY',
#               'SKEW_PLACED_TAKEN_TIME_INPLAY','SKEW_PLACED_TAKEN_TIME_OUTPLAY',
#               'KURT_PLACED_TAKEN_TIME_INPLAY','KURT_PLACED_TAKEN_TIME_OUTPLAY',
#               'STDEV_TAKEN_HOUR_INPLAY','STDEV_TAKEN_HOUR_OUTPLAY',
#               'NET_PROFIT_INPLAY','NET_PROFIT_OUTPLAY',
#               'MARGIN_INPLAY','MARGIN_OUTPLAY'
)][is.na(test_dt[, c('TRANSACTION_COUNT_INPLAY','TRANSACTION_COUNT_OUTPLAY','TRANSACTION_COUNT_OUTPLAY_L','TRANSACTION_COUNT_OUTPLAY_C',
'AVG_BET_SIZE_INPLAY','AVG_BET_SIZE_OUTPLAY','AVG_BET_SIZE_OUTPLAY_L','AVG_BET_SIZE_OUTPLAY_C',
'MAX_BET_SIZE_INPLAY','MAX_BET_SIZE_OUTPLAY','MAX_BET_SIZE_OUTPLAY_L','MAX_BET_SIZE_OUTPLAY_C',
'MIN_BET_SIZE_INPLAY','MIN_BET_SIZE_OUTPLAY','MIN_BET_SIZE_OUTPLAY_L','MIN_BET_SIZE_OUTPLAY_C',
'STDEV_BET_SIZE_INPLAY','STDEV_BET_SIZE_OUTPLAY','STDEV_BET_SIZE_OUTPLAY_L','STDEV_BET_SIZE_OUTPLAY_C'
#                                                                     ,'AVG_PLACED_TAKEN_TIME_INPLAY','AVG_PLACED_TAKEN_TIME_OUTPLAY',
#                                                                      'STDEV_PLACED_TAKEN_TIME_INPLAY','STDEV_PLACED_TAKEN_TIME_OUTPLAY',
#                                                                      'SKEW_PLACED_TAKEN_TIME_INPLAY','SKEW_PLACED_TAKEN_TIME_OUTPLAY',
#                                                                      'KURT_PLACED_TAKEN_TIME_INPLAY','KURT_PLACED_TAKEN_TIME_OUTPLAY',
#                                                                      'STDEV_TAKEN_HOUR_INPLAY','STDEV_TAKEN_HOUR_OUTPLAY',
#                                                                      'NET_PROFIT_INPLAY','NET_PROFIT_OUTPLAY',
#                                                                      'MARGIN_INPLAY','MARGIN_OUTPLAY'
)])] <- 0
# test_dt[, c('PREV_WIN_RATE_INPLAY','PREV_WIN_RATE_OUTPLAY','PREV_WIN_RATE')][is.na(test_dt[, c('PREV_WIN_RATE_INPLAY','PREV_WIN_RATE_OUTPLAY','PREV_WIN_RATE')])] <- 0.5
head(test_dt)
# 10. CANCEL_RATIO
test_dt$CANCEL_RATIO_OUTPLAY <- test_dt$TRANSACTION_COUNT_OUTPLAY_C/(test_dt$TRANSACTION_COUNT_OUTPLAY_C+test_dt$TRANSACTION_COUNT_OUTPLAY+test_dt$TRANSACTION_COUNT_OUTPLAY_L)
# 11. INPLAY_RATIO
test_dt$INPLAY_RATIO <- test_dt$TRANSACTION_COUNT_INPLAY/(test_dt$TRANSACTION_COUNT_INPLAY + test_dt$TRANSACTION_COUNT_OUTPLAY)
test_dt[,c(42:43)][is.na(test_dt[,c(42:43)])] <- 0
# 12. Country
country <- mbr.event[!duplicated(mbr.event[,c('ACCOUNT_ID', 'COUNTRY_OF_RESIDENCE_NAME')]),c('ACCOUNT_ID', 'COUNTRY_OF_RESIDENCE_NAME')]
test_dt <- merge(test_dt, country, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
# 13. BL_RATIO
BL_RATIO_INPLAY <- mbr.event[!duplicated(mbr.event[,c('ACCOUNT_ID', 'BL_RATIO_INPLAY')]),c('ACCOUNT_ID', 'BL_RATIO_INPLAY')]
test_dt <- merge(test_dt, BL_RATIO_INPLAY, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
BL_RATIO_OUTPLAY <- mbr.event[!duplicated(mbr.event[,c('ACCOUNT_ID', 'BL_RATIO_OUTPLAY')]),c('ACCOUNT_ID', 'BL_RATIO_OUTPLAY')]
test_dt <- merge(test_dt, BL_RATIO_OUTPLAY, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
BL_RATIO <- mbr.event[!duplicated(mbr.event[,c('ACCOUNT_ID', 'BL_RATIO')]),c('ACCOUNT_ID', 'BL_RATIO')]
test_dt <- merge(test_dt, BL_RATIO, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID'))
# 14. B_L_DIFF
test <- read.csv('data/semi_and_final_features.csv', stringsAsFactors=FALSE,na.strings = "")
test <- test[test$STATUS_ID == 'S',]
library(data.table)
test <- data.table(test)
### campute lag
test[, lag_TRANSACTION_COUNT:=c(0, TRANSACTION_COUNT[-.N]), by=c('Account_ID','EVENT_ID','INPLAY_BET')]
test[, lag_AVG_BET_SIZE:=c(0, AVG_BET_SIZE[-.N]), by=c('Account_ID','EVENT_ID','INPLAY_BET')]
test[, lag_MAX_BET_SIZE:=c(0, MAX_BET_SIZE[-.N]), by=c('Account_ID','EVENT_ID','INPLAY_BET')]
test[, lag_MIN_BET_SIZE:=c(0, MIN_BET_SIZE[-.N]), by=c('Account_ID','EVENT_ID','INPLAY_BET')]
test[, lag_STDEV_BET_SIZE:=c(0, STDEV_BET_SIZE[-.N]), by=c('Account_ID','EVENT_ID','INPLAY_BET')]
### aggregate
test <- as.data.frame(test)
test$bl_diff_TRANSACTION_COUNT <- abs(test$TRANSACTION_COUNT - test$lag_TRANSACTION_COUNT)/(test$TRANSACTION_COUNT + test$lag_TRANSACTION_COUNT)
test$bl_diff_AVG_BET_SIZE<- abs(test$AVG_BET_SIZE - test$lag_AVG_BET_SIZE)/(test$AVG_BET_SIZE + test$lag_AVG_BET_SIZE)
test$bl_diff_MAX_BET_SIZE<- abs(test$MAX_BET_SIZE - test$lag_MAX_BET_SIZE)/(test$MAX_BET_SIZE + test$lag_MAX_BET_SIZE)
test$bl_diff_MIN_BET_SIZE<- abs(test$MIN_BET_SIZE - test$lag_MIN_BET_SIZE)/(test$MIN_BET_SIZE + test$lag_MIN_BET_SIZE)
test$bl_diff_STDEV_BET_SIZE<- abs(test$STDEV_BET_SIZE - test$lag_STDEV_BET_SIZE)/(test$STDEV_BET_SIZE + test$lag_STDEV_BET_SIZE)
test$row_num <- 1
test$identifier <- paste0(test$Account_ID, test$EVENT_ID, test$STATUS_ID, test$INPLAY_BET)
test[duplicated(test[,c(1,2,4,5)]), 'row_num'] <- 2
test_feat_bl <- test[test$row_num == 2, c(1,2,4,5, 15:19, 21)]
test_feat <- test[!test$identifier %in% test_feat_bl$identifier, c(1,2,4,5, 15:19, 21)]
test_feat_final <- rbind(test_feat_bl, test_feat)
### Output
dim(test_feat_final);length(unique(test_feat_final$identifier))
test_feat_final$identifier <- NULL
### test_feat merge
test_feat_inplay <- test_feat_final[test_feat_final$INPLAY_BET == 'Y',-c(3,4,10)];
names(test_feat_inplay) <- c('ACCOUNT_ID', 'EVENT_ID', 'BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN')
test_feat_outplay <- test_feat_final[!test_feat_final$INPLAY_BET == 'Y',-c(3,4,10)]
names(test_feat_outplay) <- c('ACCOUNT_ID', 'EVENT_ID', 'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')
test_dt <- merge(test_dt, test_feat_inplay, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID', 'EVENT_ID'))
test_dt <- merge(test_dt, test_feat_outplay, all.x = TRUE, all.y = FALSE, by = c('ACCOUNT_ID', 'EVENT_ID'))
test_dt[,c('BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN',
'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')][is.na(test_dt[,c('BL_DIFF_TRANSACTION_COUNT_IN', 'BL_DIFF_AVG_BET_SIZE_IN',
'BL_DIFF_MAX_BET_SIZE_IN','BL_DIFF_MIN_BET_SIZE_IN','BL_DIFF_STDEV_BET_SIZE_IN',
'BL_DIFF_TRANSACTION_COUNT_OUT', 'BL_DIFF_AVG_BET_SIZE_OUT',
'BL_DIFF_MAX_BET_SIZE_OUT','BL_DIFF_MIN_BET_SIZE_OUT','BL_DIFF_STDEV_BET_SIZE_OUT')])] <- 0
#META DATA
# 1. RFM
# 2. CLUSTERING
# Imputation
# test_dt[is.na(test_dt$AVG_TAKEN_HOUR_INPLAY),'AVG_TAKEN_HOUR_INPLAY'] <- median(mbr.event$AVG_TAKEN_HOUR_INPLAY, na.rm=T)
# test_dt[is.na(test_dt$AVG_TAKEN_HOUR_OUTPLAY),'AVG_TAKEN_HOUR_OUTPLAY'] <- median(mbr.event$AVG_TAKEN_HOUR_OUTPLAY, na.rm=T)
test <- test_dt
apply(test,2, function(x) mean(is.na(x)))
save(test, file='data/2_test_new.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/1_complete_data_new.RData');
load('data/2_test_new.RData');ls()
test$flag_regr <- 0
test$flag_class <- 'M'
all <- rbind(total, test)
str(all)
all$COUNTRY_OF_RESIDENCE_NAME <- NULL
all_c <- all # No dummy variable
all_c$AVG_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_INPLAY[is.na(all_c$STDEV_TAKEN_HOUR_INPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_OUTPLAY[is.na(all_c$STDEV_TAKEN_HOUR_OUTPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE_INPLAY[is.na(all_c$PREV_WIN_RATE_INPLAY)] <- median(all_c$PREV_WIN_RATE_INPLAY, na.rm=T)
all_c$PREV_WIN_RATE_OUTPLAY[is.na(all_c$PREV_WIN_RATE_OUTPLAY)] <- median(all_c$PREV_WIN_RATE_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE[is.na(all_c$PREV_WIN_RATE)] <- median(all_c$PREV_WIN_RATE, na.rm=T)
all_c$NET_PROFIT_INPLAY[is.na(all_c$NET_PROFIT_INPLAY)] <- median(all_c$NET_PROFIT_INPLAY, na.rm=T)
all_c$NET_PROFIT_OUTPLAY[is.na(all_c$NET_PROFIT_OUTPLAY)] <- median(all_c$NET_PROFIT_OUTPLAY, na.rm=T)
all_c$MARGIN_INPLAY[is.na(all_c$MARGIN_INPLAY)] <- median(all_c$MARGIN_INPLAY, na.rm=T)
all_c$MARGIN_OUTPLAY[is.na(all_c$MARGIN_OUTPLAY)] <- median(all_c$MARGIN_OUTPLAY, na.rm=T)
all_c$BL_RATIO_INPLAY[is.na(all_c$BL_RATIO_INPLAY)] <- median(all_c$BL_RATIO_INPLAY, na.rm=T)
all_c$BL_RATIO_OUTPLAY[is.na(all_c$BL_RATIO_OUTPLAY)] <- median(all_c$BL_RATIO_OUTPLAY, na.rm=T)
all_c$BL_RATIO[is.na(all_c$BL_RATIO)] <- median(all_c$BL_RATIO, na.rm=T)
apply(all_c,2, function(x) mean(is.na(x)))
all_c$INVEST <- all_c$TRANSACTION_COUNT_INPLAY * all_c$AVG_BET_SIZE_INPLAY + all_c$TRANSACTION_COUNT_OUTPLAY * all_c$AVG_BET_SIZE_OUTPLAY
head(all)
all_c$AVG_TAKEN_HOUR_INPLAY[is.na(all_c$AVG_TAKEN_HOUR_INPLAY)] <- median(all_c$AVG_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$AVG_TAKEN_HOUR_OUTPLAY[is.na(all_c$AVG_TAKEN_HOUR_OUTPLAY)] <- median(all_c$AVG_TAKEN_HOUR_OUTPLAY, na.rm=T)
apply(all_c,2, function(x) mean(is.na(x)))
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/1_complete_data_new.RData');
load('data/2_test_new.RData');ls()
test$flag_regr <- 0
test$flag_class <- 'M'
### Dummy Variable
all <- rbind(total, test)
str(all)
all_c <- all # No dummy variable
all_c$AVG_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_INPLAY[is.na(all_c$STDEV_TAKEN_HOUR_INPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_OUTPLAY[is.na(all_c$STDEV_TAKEN_HOUR_OUTPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE_INPLAY[is.na(all_c$PREV_WIN_RATE_INPLAY)] <- median(all_c$PREV_WIN_RATE_INPLAY, na.rm=T)
all_c$PREV_WIN_RATE_OUTPLAY[is.na(all_c$PREV_WIN_RATE_OUTPLAY)] <- median(all_c$PREV_WIN_RATE_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE[is.na(all_c$PREV_WIN_RATE)] <- median(all_c$PREV_WIN_RATE, na.rm=T)
all_c$NET_PROFIT_INPLAY[is.na(all_c$NET_PROFIT_INPLAY)] <- median(all_c$NET_PROFIT_INPLAY, na.rm=T)
all_c$NET_PROFIT_OUTPLAY[is.na(all_c$NET_PROFIT_OUTPLAY)] <- median(all_c$NET_PROFIT_OUTPLAY, na.rm=T)
all_c$MARGIN_INPLAY[is.na(all_c$MARGIN_INPLAY)] <- median(all_c$MARGIN_INPLAY, na.rm=T)
all_c$MARGIN_OUTPLAY[is.na(all_c$MARGIN_OUTPLAY)] <- median(all_c$MARGIN_OUTPLAY, na.rm=T)
all_c$BL_RATIO_INPLAY[is.na(all_c$BL_RATIO_INPLAY)] <- median(all_c$BL_RATIO_INPLAY, na.rm=T)
all_c$BL_RATIO_OUTPLAY[is.na(all_c$BL_RATIO_OUTPLAY)] <- median(all_c$BL_RATIO_OUTPLAY, na.rm=T)
all_c$BL_RATIO[is.na(all_c$BL_RATIO)] <- median(all_c$BL_RATIO, na.rm=T)
all_c$AVG_TAKEN_HOUR_INPLAY[is.na(all_c$AVG_TAKEN_HOUR_INPLAY)] <- median(all_c$AVG_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$AVG_TAKEN_HOUR_OUTPLAY[is.na(all_c$AVG_TAKEN_HOUR_OUTPLAY)] <- median(all_c$AVG_TAKEN_HOUR_OUTPLAY, na.rm=T)
apply(all_c,2, function(x) mean(is.na(x)))
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/1_complete_data_new.RData');
load('data/2_test_new.RData');ls()
test$flag_regr <- 0
test$flag_class <- 'M'
### Dummy Variable
all <- rbind(total, test)
str(all)
all$COUNTRY_OF_RESIDENCE_NAME <- NULL
all_c <- all # No dummy variable
all_c$AVG_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_INPLAY[is.na(all_c$STDEV_TAKEN_HOUR_INPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_OUTPLAY[is.na(all_c$STDEV_TAKEN_HOUR_OUTPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE_INPLAY[is.na(all_c$PREV_WIN_RATE_INPLAY)] <- median(all_c$PREV_WIN_RATE_INPLAY, na.rm=T)
all_c$PREV_WIN_RATE_OUTPLAY[is.na(all_c$PREV_WIN_RATE_OUTPLAY)] <- median(all_c$PREV_WIN_RATE_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE[is.na(all_c$PREV_WIN_RATE)] <- median(all_c$PREV_WIN_RATE, na.rm=T)
all_c$NET_PROFIT_INPLAY[is.na(all_c$NET_PROFIT_INPLAY)] <- median(all_c$NET_PROFIT_INPLAY, na.rm=T)
all_c$NET_PROFIT_OUTPLAY[is.na(all_c$NET_PROFIT_OUTPLAY)] <- median(all_c$NET_PROFIT_OUTPLAY, na.rm=T)
all_c$MARGIN_INPLAY[is.na(all_c$MARGIN_INPLAY)] <- median(all_c$MARGIN_INPLAY, na.rm=T)
all_c$MARGIN_OUTPLAY[is.na(all_c$MARGIN_OUTPLAY)] <- median(all_c$MARGIN_OUTPLAY, na.rm=T)
all_c$BL_RATIO_INPLAY[is.na(all_c$BL_RATIO_INPLAY)] <- median(all_c$BL_RATIO_INPLAY, na.rm=T)
all_c$BL_RATIO_OUTPLAY[is.na(all_c$BL_RATIO_OUTPLAY)] <- median(all_c$BL_RATIO_OUTPLAY, na.rm=T)
all_c$BL_RATIO[is.na(all_c$BL_RATIO)] <- median(all_c$BL_RATIO, na.rm=T)
all_c$AVG_TAKEN_HOUR_INPLAY[is.na(all_c$AVG_TAKEN_HOUR_INPLAY)] <- median(all_c$AVG_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$AVG_TAKEN_HOUR_OUTPLAY[is.na(all_c$AVG_TAKEN_HOUR_OUTPLAY)] <- median(all_c$AVG_TAKEN_HOUR_OUTPLAY, na.rm=T)
# all_c$COUNTRY_OF_RESIDENCE_NAME[is.na(all_c$COUNTRY_OF_RESIDENCE_NAME)] <- 'UAE'
"flag_regr","flag_class","INVEST"))])
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101183757,101183885,101184013) ,]
train <- total[!total$EVENT_ID %in% c(101183757,101183885,101184013) ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_TREE_1.RData')
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_TREE_2.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/1_complete_data_new.RData');
load('data/2_test_new.RData');ls()
test$flag_regr <- 0
test$flag_class <- 'M'
### Dummy Variable
all <- rbind(total, test)
str(all)
all$COUNTRY_OF_RESIDENCE_NAME <- NULL
all$AVG_TAKEN_HOUR_INPLAY <- as.factor(all$AVG_TAKEN_HOUR_INPLAY)
all$AVG_TAKEN_HOUR_OUTPLAY <- as.factor(all$AVG_TAKEN_HOUR_OUTPLAY)
# all$COUNTRY_OF_RESIDENCE_NAME <- as.factor(all$COUNTRY_OF_RESIDENCE_NAME)
dummies <- dummyVars(flag_class ~ ., data = all[,c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_class')])
dum <- predict(dummies, newdata = all[,c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_class')])
apply(dum,2, function(x) mean(is.na(x)))
dum[is.na(dum)] <- 0
all_c <- cbind(all[,!names(all) %in% c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_regr','flag_class')],
dum, all[,c('flag_regr','flag_class')])
all <- all_c
all_c <- all # No dummy variable
all_c$AVG_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_INPLAY[is.na(all_c$STDEV_TAKEN_HOUR_INPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_OUTPLAY[is.na(all_c$STDEV_TAKEN_HOUR_OUTPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE_INPLAY[is.na(all_c$PREV_WIN_RATE_INPLAY)] <- median(all_c$PREV_WIN_RATE_INPLAY, na.rm=T)
all_c$PREV_WIN_RATE_OUTPLAY[is.na(all_c$PREV_WIN_RATE_OUTPLAY)] <- median(all_c$PREV_WIN_RATE_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE[is.na(all_c$PREV_WIN_RATE)] <- median(all_c$PREV_WIN_RATE, na.rm=T)
all_c$NET_PROFIT_INPLAY[is.na(all_c$NET_PROFIT_INPLAY)] <- median(all_c$NET_PROFIT_INPLAY, na.rm=T)
all_c$NET_PROFIT_OUTPLAY[is.na(all_c$NET_PROFIT_OUTPLAY)] <- median(all_c$NET_PROFIT_OUTPLAY, na.rm=T)
all_c$MARGIN_INPLAY[is.na(all_c$MARGIN_INPLAY)] <- median(all_c$MARGIN_INPLAY, na.rm=T)
all_c$MARGIN_OUTPLAY[is.na(all_c$MARGIN_OUTPLAY)] <- median(all_c$MARGIN_OUTPLAY, na.rm=T)
all_c$BL_RATIO_INPLAY[is.na(all_c$BL_RATIO_INPLAY)] <- median(all_c$BL_RATIO_INPLAY, na.rm=T)
all_c$BL_RATIO_OUTPLAY[is.na(all_c$BL_RATIO_OUTPLAY)] <- median(all_c$BL_RATIO_OUTPLAY, na.rm=T)
all_c$BL_RATIO[is.na(all_c$BL_RATIO)] <- median(all_c$BL_RATIO, na.rm=T)
apply(all_c,2, function(x) mean(is.na(x)))
all_c$INVEST <- all_c$TRANSACTION_COUNT_INPLAY * all_c$AVG_BET_SIZE_INPLAY + all_c$TRANSACTION_COUNT_OUTPLAY * all_c$AVG_BET_SIZE_OUTPLAY
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_ONEHOT_1.RData')
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101183757,101183885,101184013) ,]
train <- total[!total$EVENT_ID %in% c(101183757,101183885,101184013) ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_ONEHOT_1.RData')
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_ONEHOT_2.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
# devtools::install_github('dmlc/xgboost',subdir='R-package')
rm(list=ls()); gc()
library(xgboost);library(pROC);library(caret)
load('data/9_train_validation_test_TREE_1.RData');ls()
# load('data/9_train_validation_test_ONEHOT_1.RData');ls()
set.seed(8)
dim(train); dim(validation)
train$flag_class <- ifelse(train$flag_class == 'Y', 1, 0)
HEAD(train)
head(train)
dim(train)
bst <- xgboost(data = as.matrix(train[,3:56]), label = train$flag_class, max.depth = 6, eta = 0.02, nround = 852, maximize = F,
objective = "binary:logistic", verbose = 1, early.stop.round = 10, print.every.n = 50) #nthread = 4,
bst <- xgboost(data = as.matrix(train[,3:56]), label = train$flag_class, max.depth = 6, eta = 0.02, nround = 1400, maximize = F,
objective = "binary:logistic", verbose = 1, early.stop.round = 10, print.every.n = 50) #nthread = 4,
val <- validation#[!validation$COUNTRY_OF_RESIDENCE_NAME %in% c('Qatar'),]
p <- predict(bst, as.matrix(validation[,3:56]))
val$Y <- p
val$PRED_PROFIT_LOSS <- (val$Y - 0.5) * val$INVEST * 2
pred_fin <- aggregate(PRED_PROFIT_LOSS ~ ACCOUNT_ID, data=val, sum, na.rm=F)
pred_fin$PRED_PROFIT_LOSS_2 <- ifelse(pred_fin$PRED_PROFIT_LOSS > 0, 1, ifelse(pred_fin$PRED_PROFIT_LOSS < 0, 0, 0.5))
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
### Validation
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, ifelse(val_fin$flag_regr < 0, 0, 0.5))
#########################
### Model Performance ###
#########################
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$PRED_PROFIT_LOSS_2);print(auc(rocobj)) # Invest * Possibility
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
val$Y <- p
val$PRED_PROFIT_LOSS <- (val$Y - 0.5) * val$INVEST * 2
pred_fin <- aggregate(PRED_PROFIT_LOSS ~ ACCOUNT_ID, data=val, sum, na.rm=F)
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, ifelse(val_fin$flag_regr < 0, 0, 0.5))
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
head(val_fin)
rocobj <- roc(val_fin$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
rocobj <- roc(val_fin$PRED_PROFIT_LOSS_3, val$Y);print(auc(rocobj)) # Average Possibility
v <- merge(val_fin,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);print(auc(rocobj)) # Average Possibility
print(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(caret);library(pROC);library(doMC)
registerDoMC(cores = 4)
load('data/9_train_validation_test_TREE_1.RData');ls()
# load('data/9_train_validation_test_ONEHOT_1.RData');ls()
load('data/9_train_validation_test_ONEHOT_1.RData');ls()
head(train)
head(total)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc(); library(caret)
load('data/1_complete_data_new.RData');
load('data/2_test_new.RData');ls()
test$flag_regr <- 0
test$flag_class <- 'M'
### Dummy Variable
all <- rbind(total, test)
str(all)
all$COUNTRY_OF_RESIDENCE_NAME <- NULL
# all$AVG_TAKEN_HOUR_INPLAY <- as.factor(all$AVG_TAKEN_HOUR_INPLAY)
# all$AVG_TAKEN_HOUR_OUTPLAY <- as.factor(all$AVG_TAKEN_HOUR_OUTPLAY)
# all$COUNTRY_OF_RESIDENCE_NAME <- as.factor(all$COUNTRY_OF_RESIDENCE_NAME)
# library(caret)
# dummies <- dummyVars(flag_class ~ ., data = all[,c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_class')])
# dum <- predict(dummies, newdata = all[,c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_class')])
# apply(dum,2, function(x) mean(is.na(x)))
# dum[is.na(dum)] <- 0
# all_c <- cbind(all[,!names(all) %in% c('AVG_TAKEN_HOUR_INPLAY', 'AVG_TAKEN_HOUR_OUTPLAY', 'flag_regr','flag_class')],
#                dum, all[,c('flag_regr','flag_class')])
# all <- all_c
### Imputation
all_c <- all # No dummy variable
all_c$AVG_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$AVG_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$STDEV_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$SKEW_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_INPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_INPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_INPLAY, na.rm=T)
all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY[is.na(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY)] <- median(all_c$KURT_PLACED_TAKEN_TIME_OUTPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_INPLAY[is.na(all_c$STDEV_TAKEN_HOUR_INPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$STDEV_TAKEN_HOUR_OUTPLAY[is.na(all_c$STDEV_TAKEN_HOUR_OUTPLAY)] <- median(all_c$STDEV_TAKEN_HOUR_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE_INPLAY[is.na(all_c$PREV_WIN_RATE_INPLAY)] <- median(all_c$PREV_WIN_RATE_INPLAY, na.rm=T)
all_c$PREV_WIN_RATE_OUTPLAY[is.na(all_c$PREV_WIN_RATE_OUTPLAY)] <- median(all_c$PREV_WIN_RATE_OUTPLAY, na.rm=T)
all_c$PREV_WIN_RATE[is.na(all_c$PREV_WIN_RATE)] <- median(all_c$PREV_WIN_RATE, na.rm=T)
all_c$NET_PROFIT_INPLAY[is.na(all_c$NET_PROFIT_INPLAY)] <- median(all_c$NET_PROFIT_INPLAY, na.rm=T)
all_c$NET_PROFIT_OUTPLAY[is.na(all_c$NET_PROFIT_OUTPLAY)] <- median(all_c$NET_PROFIT_OUTPLAY, na.rm=T)
all_c$MARGIN_INPLAY[is.na(all_c$MARGIN_INPLAY)] <- median(all_c$MARGIN_INPLAY, na.rm=T)
all_c$MARGIN_OUTPLAY[is.na(all_c$MARGIN_OUTPLAY)] <- median(all_c$MARGIN_OUTPLAY, na.rm=T)
all_c$BL_RATIO_INPLAY[is.na(all_c$BL_RATIO_INPLAY)] <- median(all_c$BL_RATIO_INPLAY, na.rm=T)
all_c$BL_RATIO_OUTPLAY[is.na(all_c$BL_RATIO_OUTPLAY)] <- median(all_c$BL_RATIO_OUTPLAY, na.rm=T)
all_c$BL_RATIO[is.na(all_c$BL_RATIO)] <- median(all_c$BL_RATIO, na.rm=T)
all_c$INVEST <- all_c$TRANSACTION_COUNT_INPLAY * all_c$AVG_BET_SIZE_INPLAY + all_c$TRANSACTION_COUNT_OUTPLAY * all_c$AVG_BET_SIZE_OUTPLAY
all_c$AVG_TAKEN_HOUR_INPLAY[is.na(all_c$AVG_TAKEN_HOUR_INPLAY)] <- median(all_c$AVG_TAKEN_HOUR_INPLAY, na.rm=T)
all_c$AVG_TAKEN_HOUR_OUTPLAY[is.na(all_c$AVG_TAKEN_HOUR_OUTPLAY)] <- median(all_c$AVG_TAKEN_HOUR_OUTPLAY, na.rm=T)
apply(all_c,2, function(x) mean(is.na(x)))
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
train <- total[!total$EVENT_ID %in% c(101150834,101153072,101149398)  ,]
dim(train); dim(validation)
save(train, validation, total, test, file='data/9_train_validation_test_TREE_2.RData')
test <- all_c[all_c$flag_class == 'M', ]
total <- all_c[all_c$flag_class != 'M', ]
validation <- total[total$EVENT_ID %in% c(101183757,101183885,101184013),]
train <- total[!total$EVENT_ID %in% c(101183757,101183885,101184013),]
dim(train); dim(validation)
### Output
# save(train, validation, total, test, file='data/3_train_validation_test.RData')
# save(train, validation, total, test, file='data/4_train_validation_test_center_scale.RData')
# save(train, validation, total, test, file='data/5_train_validation_test_pca.RData')
save(train, validation, total, test, file='data/9_train_validation_test_TREE_1.RData')
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
# devtools::install_github('dmlc/xgboost',subdir='R-package')
rm(list=ls()); gc()
library(xgboost);library(pROC);library(caret)
load('data/9_train_validation_test_TREE_1.RData');ls()
# load('data/9_train_validation_test_ONEHOT_1.RData');ls()
# Validation
set.seed(8)
# inTraining <- createDataPartition(total$flag_class, p = .8, list = FALSE)
# train <- total[inTraining,]
# validation  <- total[-inTraining,]
dim(train); dim(validation)
train$flag_class <- ifelse(train$flag_class == 'Y', 1, 0)
head(train)
setwd('/Users/ivanliu/Google Drive/Melbourne Datathon/Melbourne_Datathon_2015_Kaggle')
setwd('C:\\Users\\iliu2\\Documents\\datathon\\Melbourne_Datathon_2015_Kaggle')
rm(list=ls()); gc()
library(caret);library(pROC);library(doMC)
registerDoMC(cores = 4)
load('data/9_train_validation_test_TREE_1.RData');ls()
# load('data/9_train_validation_test_ONEHOT_1.RData');ls()
####################
# Config 1 #########
####################
train$flag_class <- as.factor(train$flag_class)
fitControl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
Grid <-  expand.grid(mtry=8)
set.seed(825)
fit <- train(flag_class ~ ., data=train[,-c(1,2,57,59)], # classification
method = "rf",
trControl = fitControl,
tuneGrid = Grid,
# preProcess = c('center', 'scale'),
metric ='ROC',
verbose = T)
fit
val <- validation#[!validation$COUNTRY_OF_RESIDENCE_NAME %in% c('Qatar'),]
p <- predict(fit, newdata=val, type = 'prob')
val$Y <- p$Y
val$PRED_PROFIT_LOSS <- (val$Y - 0.5) * val$INVEST * 2
pred_fin <- aggregate(PRED_PROFIT_LOSS ~ ACCOUNT_ID, data=val, sum, na.rm=F)
pred_fin$PRED_PROFIT_LOSS_2 <- ifelse(pred_fin$PRED_PROFIT_LOSS > 0, 1, ifelse(pred_fin$PRED_PROFIT_LOSS < 0, 0, 0.5))
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
### Validation
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, ifelse(val_fin$flag_regr < 0, 0, 0.5))
dim(val_fin)
dim(pred_fin)
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
# With a roc object:
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$PRED_PROFIT_LOSS_2);auc(rocobj) # Invest * Possibility
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);auc(rocobj) # Average Possibility
# rocobj <- roc(val$flag_class, p$Y);auc(rocobj) # Single Events
# Partial AUC:
auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE)
plot(rocobj)
head(v)
fitImp <- varImp(fit, scale = T)
as.data.frame(fitImp[1])
write.csv(as.data.frame(fitImp[1]),'model/variable_imp_rf_new_feat.csv',quote = FALSE,row.names = T)
fitControl <- trainControl(method = "cv",
number = 2,
classProbs = TRUE,
summaryFunction = twoClassSummary)
Grid <-  expand.grid(mtry=8)
# Grid <-  expand.grid(nrounds = 100, max_depth = 8, eta = 0.05) # xgbTree
# Grid <-  expand.grid(sigma = 1, C = 0.1) # svmRadial
# Grid <-  expand.grid(size = 80, decay = 0.1) # nnet
# Grid <-  expand.grid(fL=0.01, usekernel=F) # nb
# Grid <-  expand.grid(nIter=20) # LogitBoost
# Grid <-  expand.grid(n.trees = 180, interaction.depth = 6, shrinkage = 0.01) # gbm
# Training
set.seed(825)
fit <- train(flag_class ~ ., data=train[,-c(1,2,57,59)], # classification
method = "rf",
trControl = fitControl,
tuneGrid = Grid,
# preProcess = c('center', 'scale'),
metric ='ROC',
verbose = T)
fit
val <- validation#[!validation$COUNTRY_OF_RESIDENCE_NAME %in% c('Qatar'),]
p <- predict(fit, newdata=val, type = 'prob')
val$Y <- p$Y
val$PRED_PROFIT_LOSS <- (val$Y - 0.5) * val$INVEST * 2
pred_fin <- aggregate(PRED_PROFIT_LOSS ~ ACCOUNT_ID, data=val, sum, na.rm=F)
pred_fin$PRED_PROFIT_LOSS_2 <- ifelse(pred_fin$PRED_PROFIT_LOSS > 0, 1, ifelse(pred_fin$PRED_PROFIT_LOSS < 0, 0, 0.5))
pred_fin2 <- aggregate(Y ~ ACCOUNT_ID, data=val, mean, na.rm=F)
### Validation
val_fin <- aggregate(flag_regr ~ ACCOUNT_ID, data=val, sum, na.rm=F)
val_fin$PRED_PROFIT_LOSS_3 <- ifelse(val_fin$flag_regr > 0, 1, ifelse(val_fin$flag_regr < 0, 0, 0.5))
# p_rf <- p
# p_lg <- p
# p$Y <- (p_rf$Y + p_lg$Y)/2
#########################
### Model Performance ###
#########################
v <- merge(val_fin,pred_fin,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
v <- merge(v,pred_fin2,all.x = TRUE,all.y = FALSE, by = 'ACCOUNT_ID')
# With a roc object:
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$PRED_PROFIT_LOSS_2);auc(rocobj) # Invest * Possibility
rocobj <- roc(v$PRED_PROFIT_LOSS_3, v$Y);auc(rocobj) # Average Possibility
# rocobj <- roc(val$flag_class, p$Y);auc(rocobj) # Single Events
# Partial AUC:
auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE)
# Plot
plot(rocobj)
plot(auc(rocobj, partial.auc=c(1, .8), partial.auc.focus="se", partial.auc.correct=TRUE))
